#include "../base/fox_avx.h"
#include "../base/fox_pure.h"
#include "../base/fox_sse.h"
#include "./operation.h"
#include <cmath>
#include <stdint.h>

static const double lnPremute[] = {0.0000000000000000000000000000000000000000,
                                   0.0099503308531680920157036496220825938508,
                                   0.0198026272961797297766928238615946611390,
                                   0.0295588022415444288959474050670905853622,
                                   0.0392207131532813293994799153097119415179,
                                   0.0487901641694320417630414965515228686854,
                                   0.0582689081239758238650594535101845394820,
                                   0.0676586484738148641326915821991860866547,
                                   0.0769610411361283941467092972743557766080,
                                   0.0861776962410524122182309270101541187614,
                                   0.0953101798043249348602046211453853175044,
                                   0.1043600153242428552058385093914694152772,
                                   0.1133286853070032684787094012790475971997,
                                   0.1222176327242493060198924581527535337955,
                                   0.1310282624064041945288749957398977130651,
                                   0.1397619423751588207949225761694833636284,
                                   0.1484200051182734125809759007097454741597,
                                   0.1570037488096648892188511581480270251632,
                                   0.1655144384775735222348203024012036621571,
                                   0.1739533071234381500502763628901448100805,
                                   0.1823215567939547865350391475658398121595,
                                   0.1906203596086498697204092422907706350088,
                                   0.1988508587451653375488547226268565282226,
                                   0.2070141693843262908902858043802552856505,
                                   0.2151113796169456804374675584767828695476,
                                   0.2231435513142099313910193814081139862537,
                                   0.2311117209633868074813989323956775479019,
                                   0.2390169004705000876942477816555765457451,
                                   0.2468600779315259785562375327572226524353,
                                   0.2546422183735809197102639700460713356733,
                                   0.2623642644674912816071810084395110607147,
                                   0.2700271372130603753092259466939140111208,
                                   0.2776317365982797213952437687112251296639,
                                   0.2851789422336626356191402464901329949498,
                                   0.2926696139628202075755325495265424251556,
                                   0.3001045924503383255377286786824697628617,
                                   0.3074846997479608878833801099972333759069,
                                   0.3148107398400337708643803580343956127763,
                                   0.3220834991691135518188104924774961546063,
                                   0.3293037471426006335128988666838267818093,
                                   0.3364722366212131721141531670582480728626,
                                   0.3435897043900771885560629925748798996210,
                                   0.3506568716131696072935142183268908411264,
                                   0.3576744442718161609562343983270693570375,
                                   0.3646431135879095175589270638738526031375,
                                   0.3715635564324832884608440508600324392319,
                                   0.3784364357202453232886796286038588732481,
                                   0.3852624007906452208160885675169993191957,
                                   0.3920420877760240063736318916198797523975,
                                   0.3987761199573680581664802957675419747829,
                                   0.4054651081081646624149072977161267772317,
                                   0.4121096508268332625490870668727438896894,
                                   0.4187103348581853179410927623393945395947,
                                   0.4252677354043444268860696411138633266091,
                                   0.4317824164255381069743577882036333903670,
                                   0.4382549309311555840729113242559833452106,
                                   0.4446858212614460126310689247475238516927,
                                   0.4510756193602170061041078952257521450520,
                                   0.4574248470388757592530737383640371263027,
                                   0.4637340162321405001577545590407680720091,
                                   0.4700036292457359099472569141653366386890,
                                   0.4762341789963719373979245119699044153094,
                                   0.4824261492442930565616165949904825538397,
                                   0.4885800148186713043330087202775757759809,
                                   0.4946962418361073865469279553508386015892,
                                   0.5007752879124895972751119188615120947361,
                                   0.5068176023684521913637013312836643308401,
                                   0.5128236264286640810894368769368156790733,
                                   0.5187937934151679586491923146240878850222,
                                   0.5247285289349824521920595543633680790663,
                                   0.5306282510621707082520970288896933197975,
                                   0.5364933705145688014326310621981974691153,
                                   0.5423242908253620431224817366455681622028,
                                   0.5481214085096879351510779088130220770836,
                                   0.5538851132264380749958831984258722513914,
                                   0.5596157879354231035051725484663620591164,
                                   0.5653138090500607892963103040528949350119,
                                   0.5709795465857381291385763688595034182072,
                                   0.5766133643039941247820934222545474767685,
                                   0.5822156198526640125123776670079678297043,
                                   0.5877866649021193934387952140241395682096,
                                   0.5933268452777348267446200225094798952341,
                                   0.5988365010887043426990317129821050912142,
                                   0.6043159668533299999637620203429833054543,
                                   0.6097655716208946197198770278191659599543,
                                   0.6151856390902338267423488105123396962881,
                                   0.6205764877251103150967992405639961361885,
                                   0.6259384308664956986234528812929056584835,
                                   0.6312717768418582009459782966587226837873,
                                   0.6365768290715514421407306144828908145428,
                                   0.6418538861723952493321121437475085258484,
                                   0.6471032420585389743905579962301999330521,
                                   0.6523251860396905854599935992155224084854,
                                   0.6575200029167945769970060609921347349882,
                                   0.6626879730752371910895703877031337469816,
                                   0.6678293725756558885109370748978108167648,
                                   0.6729444732424263442283063341164961457253,
                                   0.6780335427498975775506551144644618034363,
                                   0.6830968447064442727878486039116978645325,
                                   0.6881346387364014605125817070074845105410};

static const double expPremute[] = {
    1.00000000000000000000000000000000000000000000000000,
    1.01005016708416794912750447110738605260848999023438,
    1.02020134002675577633567627344746142625808715820312,
    1.03045453395351693792747482802951708436012268066406,
    1.04081077419238821057945187931181862950325012207031,
    1.05127109637602411673640290246112272143363952636719,
    1.06183654654535963857142633059993386268615722656250,
    1.07250818125421654158913042920175939798355102539062,
    1.08328706767495863694250601838575676083564758300781,
    1.09417428370521041536278517014579847455024719238281,
    1.10517091807564771244187795673497021198272705078125,
    1.11627807045887128545302857673959806561470031738281,
    1.12749685157937573620756666059605777263641357421875,
    1.13882838332462177355353105667745694518089294433594,
    1.15027379885722713659390592511044815182685852050781,
    1.16183424272828306200722181529272347688674926757812,
    1.17351087099181028428063200408359989523887634277344,
    1.18530485132036544904110542120179161429405212402344,
    1.19721736312181015193800703855231404304504394531250,
    1.20924959765725148486126272473484277725219726562500,
    1.22140275816016985466205824195640161633491516113281,
    1.23367805995674340024947923666331917047500610351562,
    1.24607673058738099847175817558309063315391540527344,
    1.25860000992947784759223850414855405688285827636719,
    1.27124915032140473059030227886978536844253540039062,
    1.28402541668774161642829767515650019049644470214844,
    1.29693008666577180854062589787645265460014343261719,
    1.30996445073324752073062882118392735719680786132812,
    1.32312981233743709452710390905849635601043701171875,
    1.33642748802547228770265519415261223912239074707031,
    1.34985880757600318347044776601251214742660522460938,
    1.36342511413217803983854992111446335911750793457031,
    1.37712776433595718295066490099998190999031066894531,
    1.39096812846378048433848562126513570547103881835938,
    1.40494759056359397320079551718663424253463745117188,
    1.41906754859325734408059815905289724469184875488281,
    1.43332941456034057559065786335850134491920471191406,
    1.44773461466332475922058620199095457792282104492188,
    1.46228458943422467974926348688313737511634826660156,
    1.47698079388264291722521193150896579027175903320312,
    1.49182469764127056954805539135122671723365783691406,
    1.50681778511285391353169416106538847088813781738281,
    1.52196155561863410987655242934124544262886047363281,
    1.53725752354828171242218104453058913350105285644531,
    1.55270721851133641777664706751238554716110229492188,
    1.56831218549016915275728933920618146657943725585938,
    1.58407398499448226480978973995661363005638122558594,
    1.59999419321736069399264579260488972067832946777344,
    1.61607440219289388849688293703366070985794067382812,
    1.63231621995537934388664780271938070654869079589844,
    1.64872127070012841620894050720380619168281555175781,
    1.66529119494588662142575685720657929778099060058594,
    1.68202764969888685087084922997746616601943969726562,
    1.69893230861855104585345088707981631159782409667969,
    1.71600686218485898315577742323512211441993713378906,
    1.73325301786739571774376145185669884085655212402344,
    1.75067250029610166350835243065375834703445434570312,
    1.76826705143373574813381310377735644578933715820312,
    1.78603843075007384655350506363902240991592407226562,
    1.80398841539785759202629833453102037310600280761719,
    1.82211880039050955204515958030242472887039184570312,
    1.84043139878163808376143606437835842370986938476562,
    1.85892804184634274911047668865649029612541198730469,
    1.87761057926434382636671216459944844245910644531250,
    1.89648087930495190533974891877733170986175537109375,
    1.91554082901389666204750028555281460285186767578125,
    1.93479233440203213234553913935087621212005615234375,
    1.95423732063594024488395461958134546875953674316406,
    1.97387773223044837855866262543713673949241638183594,
    1.99371553324308314891766258369898423552513122558594,
    2.01375270747047752095681971695739775896072387695312,
    2.03399125864675145436422099010087549686431884765625,
    2.05443321064388850771820216323249042034149169921875,
    2.07508060767412372271678577817510813474655151367188,
    2.09593551449436565903283735678996890783309936523438,
    2.11700001661267567243385201436467468738555908203125,
    2.13827622049681975724411131523083895444869995117188,
    2.15976625378491604578812257386744022369384765625000,
    2.18147226549820194563267250487115234136581420898438,
    2.20339642625593779001746952417306602001190185546875,
    2.22554092849246876184565735456999391317367553710938,
    2.24790798667647262476521063945256173610687255859375,
    2.27049983753240702810671791667118668556213378906250,
    2.29331874026418391920856265642214566469192504882812,
    2.31636697678109282350078501622192561626434326171875,
    2.33964685192599208818364786566235125064849853515625,
    2.36316069370579606712112763489130884408950805664062,
    2.38691085352427778687456338957417756319046020507812,
    2.41089970641721107469379603571724146604537963867188,
    2.43512965128987612928312955773435533046722412109375,
    2.45960311115695118289181664295028895139694213867188,
    2.48432253338481823234928924648556858301162719726562,
    2.50929038993629927034589854883961379528045654296875,
    2.53450917761785632364990306086838245391845703125000,
    2.55998141832927306182909887866117060184478759765625,
    2.58570965931584773045415204251185059547424316406250,
    2.61169647342311916915491565305273979902267456054688,
    2.63794445935415433623916214855853468179702758789062,
    2.66445624192941865615580354642588645219802856445312,
    2.69123447234926427285017780377529561519622802734375};

static const uint64_t _MAX_DEN = (0x001fffffffffffff);
static const double MAX_DEN = *(double *)&_MAX_DEN;

namespace fm {

FM_FORCE_INLINE int64_t FM_CALL mfrexp(double t, double *rem) {
  union {
    double s;
    uint64_t i;
  };
  s = t;
  uint64_t _rem = i;
  _rem = _rem & 0x000fffffffffffff; // set exponent to 0
  _rem = _rem | 0x3FF0000000000000; // set exponent to 1023( - 1023 = 0 as its
                                    // real number)
  uint64_t exp = i;
  exp = ((exp & 0x7fffffffffffffff) >> 52) - 1023;
  *rem = *(double *)&_rem;
  return exp;
}
double FM_CALL __do_Ln(double in) FMTHROW {
  if (in < MAX_DEN) {
    return -INFINITY;
  }
  static const simd::fmAlignFLoat4 tylorCoef[4]{-0.5, 1. / 3, -0.25, 0.2};
  double rem;
  auto exp = mfrexp(in, &rem);
  int s = rem * 100;
  double u = s * .01;
  double k = rem / u - 1; // Now ln(1+x) = exp*ln2 + ln(rem) ==> rem = s * k ==>
                          // ln(rem) = ln(s) + ln(k)
  // use Tylor's Formula at x0 = 0 to get ln(k)
  double k2 = k * k;
  double k3 = k2 * k;
  double k4 = k3 * k;
  double k5 = k4 * k;
  fm::simd::_fm_vec4 vecCoef = fm::simd::fmLoadVecP(tylorCoef->_v);
  fm::simd::_fm_vec4 veck = fm::simd::fmLoadVec(k2, k3, k4, k5);
  double lnk = k + fm::simd::fmVecDot(vecCoef, veck);
  double lns = lnPremute[s - 100];
  return exp * LOG2 + lns + lnk;
}

double FM_CALL __do_Log2(double in) FMTHROW { return __do_Ln(in) * INVLOG2; }

double FM_CALL __do_Log10(double in) FMTHROW { return __do_Ln(in) * INVLOG10; }
double FM_CALL __do_exp(double in) FMTHROW {
  if (in < 0) {
    return 1. / __do_exp(-in);
  }
  if (in <= MAX_DEN)
    return 1;
  union {
    double _2_n;
    uint64_t _t;
  };
  union {
    double _rem;
    uint64_t _i;
  };
  // Set k = [x/ln2]
  // So get x - K*ln2 = r
  //  1<  r <ln2
  // e^x = e^(r+k*ln2)
  // e^x = e^r * 2^k
  _t = in / LOG2;
  _rem = in - _t * LOG2;
  _t = (_t + 1023) << 52; // 2^k
  int u = _rem * 100;
  double r = _rem - u * 0.01;
  double r2 = r * r;
  double r3 = r2 * r;
  double r4 = r3 * r;
  static const simd::fmAlignFLoat4 coef{1, 0.5, 1. / 6, 1. / 24};
  auto vecCoef = simd::fmLoadVecP(coef._v);
  auto vecR = simd::fmLoadVec(r, r2, r3, r4);
  double ks = expPremute[u];
  volatile auto tmp = (simd::fmVecDot(vecCoef, vecR) + 1) * ks;
  return _2_n * tmp;
}

double FM_CALL __do_pow(double x, double a) FMTHROW {
  return __do_exp(a * __do_Ln(x));
}
} // namespace fm
