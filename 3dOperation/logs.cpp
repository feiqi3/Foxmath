#include "../base/fox_avx.h"
#include "../base/fox_pure.h"
#include "../base/fox_sse.h"
#include "./operation.h"
#include <cmath>
#include <stdint.h>

static double lnPremute[] = {0.0000000000000000000000000000000000000000,
                             0.0099503308531680920157036496220825938508,
                             0.0198026272961797297766928238615946611390,
                             0.0295588022415444288959474050670905853622,
                             0.0392207131532813293994799153097119415179,
                             0.0487901641694320417630414965515228686854,
                             0.0582689081239758238650594535101845394820,
                             0.0676586484738148641326915821991860866547,
                             0.0769610411361283941467092972743557766080,
                             0.0861776962410524122182309270101541187614,
                             0.0953101798043249348602046211453853175044,
                             0.1043600153242428552058385093914694152772,
                             0.1133286853070032684787094012790475971997,
                             0.1222176327242493060198924581527535337955,
                             0.1310282624064041945288749957398977130651,
                             0.1397619423751588207949225761694833636284,
                             0.1484200051182734125809759007097454741597,
                             0.1570037488096648892188511581480270251632,
                             0.1655144384775735222348203024012036621571,
                             0.1739533071234381500502763628901448100805,
                             0.1823215567939547865350391475658398121595,
                             0.1906203596086498697204092422907706350088,
                             0.1988508587451653375488547226268565282226,
                             0.2070141693843262908902858043802552856505,
                             0.2151113796169456804374675584767828695476,
                             0.2231435513142099313910193814081139862537,
                             0.2311117209633868074813989323956775479019,
                             0.2390169004705000876942477816555765457451,
                             0.2468600779315259785562375327572226524353,
                             0.2546422183735809197102639700460713356733,
                             0.2623642644674912816071810084395110607147,
                             0.2700271372130603753092259466939140111208,
                             0.2776317365982797213952437687112251296639,
                             0.2851789422336626356191402464901329949498,
                             0.2926696139628202075755325495265424251556,
                             0.3001045924503383255377286786824697628617,
                             0.3074846997479608878833801099972333759069,
                             0.3148107398400337708643803580343956127763,
                             0.3220834991691135518188104924774961546063,
                             0.3293037471426006335128988666838267818093,
                             0.3364722366212131721141531670582480728626,
                             0.3435897043900771885560629925748798996210,
                             0.3506568716131696072935142183268908411264,
                             0.3576744442718161609562343983270693570375,
                             0.3646431135879095175589270638738526031375,
                             0.3715635564324832884608440508600324392319,
                             0.3784364357202453232886796286038588732481,
                             0.3852624007906452208160885675169993191957,
                             0.3920420877760240063736318916198797523975,
                             0.3987761199573680581664802957675419747829,
                             0.4054651081081646624149072977161267772317,
                             0.4121096508268332625490870668727438896894,
                             0.4187103348581853179410927623393945395947,
                             0.4252677354043444268860696411138633266091,
                             0.4317824164255381069743577882036333903670,
                             0.4382549309311555840729113242559833452106,
                             0.4446858212614460126310689247475238516927,
                             0.4510756193602170061041078952257521450520,
                             0.4574248470388757592530737383640371263027,
                             0.4637340162321405001577545590407680720091,
                             0.4700036292457359099472569141653366386890,
                             0.4762341789963719373979245119699044153094,
                             0.4824261492442930565616165949904825538397,
                             0.4885800148186713043330087202775757759809,
                             0.4946962418361073865469279553508386015892,
                             0.5007752879124895972751119188615120947361,
                             0.5068176023684521913637013312836643308401,
                             0.5128236264286640810894368769368156790733,
                             0.5187937934151679586491923146240878850222,
                             0.5247285289349824521920595543633680790663,
                             0.5306282510621707082520970288896933197975,
                             0.5364933705145688014326310621981974691153,
                             0.5423242908253620431224817366455681622028,
                             0.5481214085096879351510779088130220770836,
                             0.5538851132264380749958831984258722513914,
                             0.5596157879354231035051725484663620591164,
                             0.5653138090500607892963103040528949350119,
                             0.5709795465857381291385763688595034182072,
                             0.5766133643039941247820934222545474767685,
                             0.5822156198526640125123776670079678297043,
                             0.5877866649021193934387952140241395682096,
                             0.5933268452777348267446200225094798952341,
                             0.5988365010887043426990317129821050912142,
                             0.6043159668533299999637620203429833054543,
                             0.6097655716208946197198770278191659599543,
                             0.6151856390902338267423488105123396962881,
                             0.6205764877251103150967992405639961361885,
                             0.6259384308664956986234528812929056584835,
                             0.6312717768418582009459782966587226837873,
                             0.6365768290715514421407306144828908145428,
                             0.6418538861723952493321121437475085258484,
                             0.6471032420585389743905579962301999330521,
                             0.6523251860396905854599935992155224084854,
                             0.6575200029167945769970060609921347349882,
                             0.6626879730752371910895703877031337469816,
                             0.6678293725756558885109370748978108167648,
                             0.6729444732424263442283063341164961457253,
                             0.6780335427498975775506551144644618034363,
                             0.6830968447064442727878486039116978645325,
                             0.6881346387364014605125817070074845105410};

static const uint64_t _MAX_DEN = (0x001fffffffffffff);
static const double MAX_DEN = *(double *)&_MAX_DEN;

namespace fm {

FM_FORCE_INLINE int64_t FM_CALL mfrexp(double t, double *rem) {
  union {
    double s;
    uint64_t i;
  };
  s = t;
  uint64_t _rem = i;
  _rem = _rem & 0x000fffffffffffff; // set exponent to 0
  _rem = _rem | 0x3FF0000000000000; // set exponent to 1023( - 1023 = 0 as its
                                    // real number)
  uint64_t exp = i;
  exp = ((exp & 0x7fffffffffffffff) >> 52) - 1023;
  *rem = *(double *)&_rem;
  return exp;
}
double FM_CALL __do_Ln(double in) FMTHROW {
  if (in < MAX_DEN) {
    return -INFINITY;
  }
  static double tylorCoef[4]{-0.5, 1. / 3, -0.25, 0.2};
  double rem;
  auto exp = mfrexp(in, &rem);
  int s = rem * 100;
  double u = s * .01;
  double k = rem / u - 1; // Now ln(1+x) = exp*ln2 + ln(rem) ==> rem = s * k ==>
                          // ln(rem) = ln(s) + ln(k)
  // use Tylor's Formula at x0 = 0 to get ln(k)
  double k2 = k * k;
  double k3 = k2 * k;
  double k4 = k3 * k;
  double k5 = k4 * k;
  fm::simd::_fm_vec4 vecCoef = fm::simd::fmLoadVecP(tylorCoef);
  fm::simd::_fm_vec4 veck = fm::simd::fmLoadVec(k2, k3, k4, k5);
  double lnk = k + fm::simd::fmVecDot(vecCoef, veck);
  double lns = lnPremute[s - 100];
  return exp * LOG2 + lns + lnk;
}

double FM_CALL __do_Log2(double in) FMTHROW { return __do_Ln(in) * INVLOG2; }

double FM_CALL __do_Log10(double in) FMTHROW { return __do_Ln(in) * INVLOG10; }
double FM_CALL __do_exp(double in) FMTHROW {
  double rem;
  auto exp = mfrexp(in, &rem);
  union {
    double _2_n;
    uint64_t _t;
  };
  union {
    double _rem;
    uint64_t _i;
  };
  _2_n = in;
  _t = _t & 0x7FF0000000000000;
  _rem = in;
  _i = _i & 0x000fffffffffffff; // set exponent to 0
  _i = _i | 0x3FF0000000000000; // set exponent to 1023( - 1023 = 0 as its
                                    // real number)
  // TODO: exp = e*e^(a+b)*2^n ==> 1+a+b = rem 2^n = e^(nln2)
  // in = n*ln2 + rem
}
} // namespace fm
